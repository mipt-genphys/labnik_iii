buildscript{
  project.ext.outputDir = "build/output"
  project.ext.logDir = "build/logs"
}

task buildOutputDir{
  doLast{
    def output = project.file(project.outputDir)
    if(!output.exists()){
      output.mkdirs()
    }
    def logs = project.file(project.logDir)
    if(!logs.exists()){
      logs.mkdirs()
    }
  }
}

task preample(type:Exec, dependsOn: ":buildOutputDir"){
  workingDir '.'

  commandLine "lualatex", "-synctex=1", "-interaction=nonstopmode", "-output-directory=${properties.ouputDir}", "\"Preamble\".tex"
}

task build(type:Exec, dependsOn: ":buildOutputDir"){
  workingDir '.'
  commandLine "lualatex", "-synctex=1", "-interaction=nonstopmode", "-output-directory=${properties.ouputDir}", "\"Labnik-III\".tex"
}

def buildFragment(String outputDir, Map parameters){
  def template = file("Template.tex").getText("UTF8").replace("\\","\\\\")
  def input = new groovy.text.SimpleTemplateEngine().createTemplate(template).make(parameters).toString()
  def tempFile = new File(project.buildDir,"frag_${parameters.fragment}.tex")

  tempFile.setText(input,"UTF8")
  2.times{
    exec{
      workingDir '.'
      standardOutput(new FileOutputStream("${project.logDir}/${parameters.fragment}.log"))
      commandLine "lualatex", "-synctex=1", "-interaction=nonstopmode", "-output-directory=${parameters.outputDir}", "-job-name=\"${parameters.fragment}\"", "${tempFile.absolutePath}"
      //standardInput = new ByteArrayInputStream(input.getBytes("UTF-8"))
    }
  }
}

task fragment(dependsOn: ":buildOutputDir"){
  doLast{
    buildFragment(outputDir, project.properties)
  }
}

task xml(dependsOn: ":buildOutputDir"){
  def name = "Labnik-III"
  def source = name

  exec{
    workingDir '.'
    commandLine "bash" "latexml" "--destination=build/xml/${name}.xml" "--includestyles" "--inputencoding=utf8" "${source}.tex"
  }
}

task html(dependsOn: ":xml"){
  def name = "Labnik-III"

  exec{
    workingDir '.'
    commandLine "bash" "latexmlpost" "--destination=build/html/${name}.html" "--format=html5" "--split" "--javascript='http://fred-wang.github.io/mathjax.js/mpadded-min.js'"  "build/xml/${name}.xml"
  }
}

task chapters(dependsOn: ":buildOutputDir"){
  doLast{
    def threads = (1..6).collect{
      def parameters = new HashMap(project.properties)
      parameters.title = "Chapter $it"
      parameters.fragment = "Chapter_$it"
      parameters.chapter = it
      Thread.start{
          buildFragment(outputDir, parameters)
      }
    }

    threads.each{it.join()}
  }
}
